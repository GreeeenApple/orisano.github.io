// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$(function() {
  var AOJLib, aojLib, appendSubmitLog, submitLogTemplate;
  AOJLib = (function() {

    function AOJLib() {
      this._parseStatus = __bind(this._parseStatus, this);

    }

    AOJLib.BASE_URL = "http://judge.u-aizu.ac.jp/onlinejudge/webservice/";

    AOJLib.prototype.constractor = function() {};

    AOJLib.prototype.getStatus = function(user) {
      return this._reqAPI("status_log", {
        user_id: user
      }, this._parseStatus);
    };

    AOJLib.prototype.getStatusList = function(userList) {
      var promises, user;
      promises = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = userList.length; _i < _len; _i++) {
          user = userList[_i];
          _results.push(this.getStatus(user));
        }
        return _results;
      }).call(this);
      return $.when.apply($, promises);
    };

    AOJLib.prototype._getXML = function(url, params) {
      return $.ajax({
        type: "GET",
        url: url,
        data: params,
        dataType: "xml"
      });
    };

    AOJLib.prototype._getParsed = function(url, params, parseFunc) {
      var dfd;
      dfd = $.Deferred();
      this._getXML(url, params).done(function(xml) {
        return dfd.resolve(parseFunc(xml));
      }).fail(function() {
        return dfd.reject();
      });
      return dfd.promise();
    };

    AOJLib.prototype._reqAPI = function(api, params, parseFunc) {
      if (params == null) {
        params = {};
      }
      if (parseFunc == null) {
        parseFunc = $.noop;
      }
      return this._getParsed(AOJLib.BASE_URL + api, params, parseFunc);
    };

    AOJLib.prototype._parseXML = function(xml, schema) {
      var element, f, key, name, names;
      xml = $(xml);
      element = {};
      for (name in schema) {
        f = schema[name];
        names = name.split(">");
        key = names[names.length - 1];
        element[key] = f(xml.find(name).text());
      }
      return element;
    };

    AOJLib.prototype._parseStatus = function(xml) {
      var status, statusList, _i, _len, _results;
      statusList = $(xml).find("status_list>status");
      _results = [];
      for (_i = 0, _len = statusList.length; _i < _len; _i++) {
        status = statusList[_i];
        _results.push(this._parseXML(status, {
          "status>run_id": String,
          "status>problem_id": String,
          "status>language": String,
          "status>cputime": parseInt,
          "status>memory": parseInt,
          "status>code_size": parseInt,
          "status>user_id": String,
          "status>status": String,
          "status>submission_date": parseInt,
          "status>submission_date_str": String
        }));
      }
      return _results;
    };

    return AOJLib;

  })();
  aojLib = new AOJLib();
  submitLogTemplate = _.template('<tr class="dat" style="display: table-row; background-color: rgb(255, 255, 255);"><td class="text-left"><a href="http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=<%= run_id %>&tab=1"><%= run_id %></a></td><td class="text-left"><a href="http://judge.u-aizu.ac.jp/onlinejudge/user.jsp?id=<%= user_id %>#1"><%= user_id %></a></td><td class="text-left" style="line-height:12pt; padding-bottom:4px"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=<%= problem_id %>"><%= problem_id %> </a></td><td class="detail_link" href="verdict.jsp?runID=<%= run_id %>" title="<%= run_id %>"><a><%= status %></a></td><td class="text-left"><a href="http://judge.u-aizu.ac.jp/onlinejudge/status_note.jsp?tab=2"><%= language %></a></td><td class="text-center"><%= cputime %> ms</td><td class="text-right" style="line-height:12pt; padding-bottom:4px"><%= memory %> KB</td><td class="text-right" style="line-height:12pt; padding-bottom:4px"><%= code_size %> B</td><td class="text-center" style="line-height: 12pt; padding-bottom: 4px; border-right-style: none;"><%= submission_date_str %></td>');
  appendSubmitLog = function(submitLog, start, end) {
    var i, _i;
    if (start == null) {
      start = 0;
    }
    end || (end = submitLog.length);
    for (i = _i = start; start <= end ? _i < end : _i > end; i = start <= end ? ++_i : --_i) {
      $(".tablewrapper").append(submitLogTemplate(submitLog[i]));
    }
    return 0;
  };
  return $.getJSON("users.json").done(function(json) {
    var users;
    users = json["users"];
    return $.when(aojLib.getStatusList(users), {}).done(function(statusList) {
      var allStatus;
      console.log(statusList);
      allStatus = Array.prototype.concat.apply([], statusList);
      console.log(allStatus);
      allStatus.sort(function(a, b) {
        return b.submission_date - a.submission_date;
      });
      return appendSubmitLog(allStatus, 0, 100);
    });
  });
});
