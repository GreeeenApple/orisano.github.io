// Generated by CoffeeScript 1.3.3

$(function() {
  var API_URL, USERS, get_api, get_solve, get_solves, parse_solve, parse_xml, user_template;
  API_URL = "http://judge.u-aizu.ac.jp/onlinejudge/webservice/";
  USERS = ["jin_matakich", "fouga", "matetya911", "seungri", "ringoh72", "m_kyoujyu", "oken", "harekumo", "raimei10130", "kagamiz", "orisano", "li_saku", "marin72_com", "shogo1996", "Cmiz56", "defective"];
  get_api = function(req_url) {
    var dfd;
    dfd = $.Deferred();
    $.ajax({
      type: "GET",
      url: req_url,
      dataType: "xml"
    }).done(function(res) {
      return dfd.resolve(res);
    }).fail(function(res) {
      return dfd.reject(res);
    });
    return dfd.promise();
  };
  get_solve = function(user) {
    var USER_API_URL;
    USER_API_URL = API_URL + "user?id=";
    return get_api(USER_API_URL + user);
  };
  get_solves = function(user_list) {
    var dfds, user;
    dfds = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = user_list.length; _i < _len; _i++) {
        user = user_list[_i];
        _results.push(get_solve(user));
      }
      return _results;
    })();
    return $.when.apply($, dfds);
  };
  parse_xml = function(xml, scheme) {
    var element, f, key, name, names;
    xml = $(xml);
    element = {};
    for (name in scheme) {
      f = scheme[name];
      names = name.split(">");
      key = names[names.length - 1];
      element[key] = f(xml.find(name).text());
    }
    return element;
  };
  parse_solve = function(xml) {
    return parse_xml(xml, {
      "user>id": String,
      "user>status>solved": parseInt
    });
  };
  user_template = _.template("<tr><td><%= id %></td><td><%= solved %></td></tr>");
  return $.when(get_solves(USERS), {}).done(function(solves_xml) {
    var context, solve_xml, solver, solves, _i, _len;
    solves = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = solves_xml.length; _i < _len; _i++) {
        solve_xml = solves_xml[_i];
        _results.push(parse_solve(solve_xml));
      }
      return _results;
    })();
    solves.sort(function(a, b) {
      if (a.solved === b.solved) {
        if (a.id < b.id) {
          return -1;
        }
        if (a.id > b.id) {
          return 1;
        }
        return 0;
      }
      return a.solved - b.solved;
    });
    context = document.getElementById("solved-graph").getContext("2d");
    for (_i = 0, _len = solves.length; _i < _len; _i++) {
      solver = solves[_i];
      $("table#watch-table").append(user_template(solver));
    }
    return new Chart(context).Bar({
      labels: (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = solves.length; _j < _len1; _j++) {
          solver = solves[_j];
          _results.push(solver.id);
        }
        return _results;
      })(),
      datasets: [
        {
          data: (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = solves.length; _j < _len1; _j++) {
              solver = solves[_j];
              _results.push(solver.solved);
            }
            return _results;
          })()
        }
      ]
    });
  });
});
